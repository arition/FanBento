// <auto-generated />
using System;
using FanBento.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FanBento.Database.Migrations
{
    [DbContext(typeof(FanBentoDatabase))]
    [Migration("20221212052045_AddUrlEmbed")]
    partial class AddUrlEmbed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("FanBento.Database.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContentBodyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmbedId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "embedId");

                    b.Property<string>("FileId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fileId");

                    b.Property<string>("ImageId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "imageId");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "text");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("UrlEmbedId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "urlEmbedId");

                    b.HasKey("Id");

                    b.HasIndex("ContentBodyId");

                    b.ToTable("Block");

                    b.HasAnnotation("Relational:JsonPropertyName", "blocks");
                });

            modelBuilder.Entity("FanBento.Database.Models.ContentBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmbedMap")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "embedMap");

                    b.Property<string>("FileMap")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fileMap");

                    b.Property<string>("ImageMap")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "imageMap");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "text");

                    b.Property<string>("UrlEmbedMap")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "urlEmbedMap");

                    b.HasKey("Id");

                    b.ToTable("ContentBody");

                    b.HasAnnotation("Relational:JsonPropertyName", "body");
                });

            modelBuilder.Entity("FanBento.Database.Models.Embed", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ContentId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "contentId");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceProvider")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "serviceProvider");

                    b.HasKey("Id");

                    b.ToTable("Embed");
                });

            modelBuilder.Entity("FanBento.Database.Models.File", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("ContentBodyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "extension");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("ContentBodyId");

                    b.ToTable("File");

                    b.HasAnnotation("Relational:JsonPropertyName", "files");
                });

            modelBuilder.Entity("FanBento.Database.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("ContentBodyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "extension");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "height");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "originalUrl");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "thumbnailUrl");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "width");

                    b.HasKey("Id");

                    b.HasIndex("ContentBodyId");

                    b.ToTable("Image");

                    b.HasAnnotation("Relational:JsonPropertyName", "images");
                });

            modelBuilder.Entity("FanBento.Database.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("BodyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommentCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "commentCount");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "coverImageUrl");

                    b.Property<string>("CreatorId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "creatorId");

                    b.Property<string>("Excerpt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "excerpt");

                    b.Property<int>("FeeRequired")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "feeRequired");

                    b.Property<bool>("HasAdultContent")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "hasAdultContent");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isLiked");

                    b.Property<int>("LikeCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "likeCount");

                    b.Property<DateTime>("PublishedDatetime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "publishedDatetime");

                    b.Property<bool>("SentToTelegramChannel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tags");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime>("UpdatedDatetime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedDatetime");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("FanBento.Database.Models.Styles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BlockId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "length");

                    b.Property<int>("Offset")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "offset");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("Styles");

                    b.HasAnnotation("Relational:JsonPropertyName", "styles");
                });

            modelBuilder.Entity("FanBento.Database.Models.UrlEmbed", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Host")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "host");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.ToTable("UrlEmbed");
                });

            modelBuilder.Entity("FanBento.Database.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "iconUrl");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasAnnotation("Relational:JsonPropertyName", "user");
                });

            modelBuilder.Entity("FanBento.Database.Models.Block", b =>
                {
                    b.HasOne("FanBento.Database.Models.ContentBody", null)
                        .WithMany("Blocks")
                        .HasForeignKey("ContentBodyId");
                });

            modelBuilder.Entity("FanBento.Database.Models.File", b =>
                {
                    b.HasOne("FanBento.Database.Models.ContentBody", null)
                        .WithMany("Files")
                        .HasForeignKey("ContentBodyId");
                });

            modelBuilder.Entity("FanBento.Database.Models.Image", b =>
                {
                    b.HasOne("FanBento.Database.Models.ContentBody", null)
                        .WithMany("Images")
                        .HasForeignKey("ContentBodyId");
                });

            modelBuilder.Entity("FanBento.Database.Models.Post", b =>
                {
                    b.HasOne("FanBento.Database.Models.ContentBody", "Body")
                        .WithMany()
                        .HasForeignKey("BodyId");

                    b.HasOne("FanBento.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Body");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FanBento.Database.Models.Styles", b =>
                {
                    b.HasOne("FanBento.Database.Models.Block", null)
                        .WithMany("Styles")
                        .HasForeignKey("BlockId");
                });

            modelBuilder.Entity("FanBento.Database.Models.Block", b =>
                {
                    b.Navigation("Styles");
                });

            modelBuilder.Entity("FanBento.Database.Models.ContentBody", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Files");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
